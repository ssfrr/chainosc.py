#!/usr/bin/env python

import chainclient
from chainclient import HALDoc
from websocket import create_connection
import sys
import liblo
import logging
import coloredlogs
import json

logger = logging.getLogger(__name__)
coloredlogs.install(level=logging.DEBUG)


class Sensor(object):
    '''Represents the data we're interested in about a sensor'''
    def __init__(self, metric, latitude, longitude, elevation):
        self.metric = metric
        self.latitude = latitude
        self.longitude = longitude
        self.elevation = elevation

    def __repr__(self):
        return "Sensor(metric=%s, latitude=%s, longitude=%s, elevation=%s)" % \
            self.metric, self.latitude, self.longitude, self.elevation


def main(site_url, osc_ip, osc_port):
    site = chainclient.get(site_url)
    sensors = get_sensor_hash(site)
    stream_url = site.links['ch:websocketStream'].href
    logger.info('Connecting to %s' % stream_url)
    ws = create_connection(stream_url)
    osc_addr = liblo.Address(osc_port)
    while True:
        resource_data = ws.recv()
        logger.debug(resource_data)
        in_data = HALDoc(json.loads(resource_data))
        try:
            sensor = sensors[in_data.links['ch:sensor'].href]
        except KeyError:
            # either doesn't have a sensor or not in the hash. ignore
            logger.warning('Hash miss')
            continue
        logger.info('Received value of %f for %s' %
                    (in_data.value, sensor.metric))
        liblo.send(osc_addr, '/sensors', sensor.metric, in_data.value)

    ws.close()


def get_sensor_hash(site):
    sensor_hash = {}
    for device in site.rels['ch:devices'].rels['items']:
        for sensor in device.rels['ch:sensors'].rels['items']:
            # TODO: add geolocation
            sensor_hash[sensor.links.self.href] = Sensor(
                sensor.metric, None, None, None)
    return sensor_hash


if __name__ == '__main__':
    try:
        site_url = sys.argv[1]
        osc_ip = sys.argv[2]
        osc_port = sys.argv[3]
    except IndexError:
        print('usage: %s <site_url> <osc_ip> <osc_port>' % sys.argv[0])
        sys.exit(1)

    main(site_url, osc_ip, osc_port)
